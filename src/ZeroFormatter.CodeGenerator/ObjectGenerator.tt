<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
namespace <#= Namespace #>
{
    using global::System;
    using global::ZeroFormatter.Formatters;
    using global::ZeroFormatter.Internal;
    using global::ZeroFormatter.Segments;

<#
   var resolverName = (ForceDefaultResolver) ? "ZeroFormatter.Formatters.DefaultResolver" : "TTypeResolver";
   var resolverNameGenericArg = (ForceDefaultResolver) ? "" : "<TTypeResolver>";
#>
<# foreach(var t in Types) {  #>
    public class <#= t.Name #>Formatter<#= resolverNameGenericArg #> : Formatter<<#= resolverName #>, <#= t.FullName #>>
<# if(!ForceDefaultResolver) { #>
        where TTypeResolver : ITypeResolver, new()
<# } #>
    {
        public override int? GetLength()
        {
            return null;
        }

        public override int Serialize(ref byte[] bytes, int offset, <#= t.FullName #> value)
        {
            var segment = value as IZeroFormatterSegment;
            if (segment != null)
            {
                return segment.Serialize(ref bytes, offset);
            }
            else if (value == null)
            {
                BinaryUtil.WriteInt32(ref bytes, offset, -1);
                return 4;
            }
            else
            {
                var startOffset = offset;

                offset += (8 + 4 * (<#= t.LastIndex #> + 1));
<# foreach(var p in t.Properties) { #>
                offset += ObjectSegmentHelper.SerializeFromFormatter<<#= resolverName #>, <#= p.Type #>>(ref bytes, startOffset, offset, <#= p.Index #>, value.<#= p.Name #>);
<# } #>

                return ObjectSegmentHelper.WriteSize(ref bytes, startOffset, offset, <#= t.LastIndex #>);
            }
        }

        public override <#= t.FullName #> Deserialize(ref byte[] bytes, int offset, global::ZeroFormatter.DirtyTracker tracker, out int byteSize)
        {
            byteSize = BinaryUtil.ReadInt32(ref bytes, offset);
            if (byteSize == -1)
            {
                byteSize = 4;
                return null;
            }
            return new <#= t.Name #>ObjectSegment<#= resolverNameGenericArg #>(tracker, new ArraySegment<byte>(bytes, offset, byteSize));
        }
    }

    public class <#= t.Name #>ObjectSegment<#= resolverNameGenericArg #> : <#= t.FullName #>, IZeroFormatterSegment
<# if(!ForceDefaultResolver) { #>
        where TTypeResolver : ITypeResolver, new()
<# } #>    {
        static readonly int[] __elementSizes = new int[]{ <#= string.Join(", ", t.ElementFixedSizes) #> };

        readonly ArraySegment<byte> __originalBytes;
        readonly global::ZeroFormatter.DirtyTracker __tracker;
        readonly int __binaryLastIndex;
        readonly byte[] __extraFixedBytes;

<# foreach(var p in t.Properties) { #>
<# if(p.IsFixedSize) { #>
<# } else if(p.IsCacheSegment) { #>
        CacheSegment<<#= resolverName #>, <#= p.Type #>> _<#= p.Name #>;
<# } else { #>
        <#= p.Type #> _<#= p.Name #>;
<# } } #>

<# foreach(var p in t.Properties) { #>
        // <#= p.Index #>
        public override <#= p.Type #> <#= p.Name #>
        {
<# if(p.IsFixedSize) { #>
            <#= (p.IsGetProtected ? "protected " : "") + "get" #>
            {
                return ObjectSegmentHelper.GetFixedProperty<<#= resolverName #>, <#= p.Type #>>(__originalBytes, <#= p.Index #>, __binaryLastIndex, __extraFixedBytes, __tracker);
            }
            <#= (p.IsSetProtected ? "protected " : "") + "set" #>
            {
                ObjectSegmentHelper.SetFixedProperty<<#= resolverName #>, <#= p.Type #>>(__originalBytes, <#= p.Index #>, __binaryLastIndex, __extraFixedBytes, value, __tracker);
            }
<# } else if(p.IsCacheSegment) { #>
            <#= (p.IsGetProtected ? "protected " : "") + "get" #>
            {
                return _<#= p.Name #>.Value;
            }
            <#= (p.IsSetProtected ? "protected " : "") + "set" #>
            {
                _<#= p.Name #>.Value = value;
            }
<# } else { #>
            <#= (p.IsGetProtected ? "protected " : "") + "get" #>
            {
                return _<#= p.Name #>;
            }
            <#= (p.IsSetProtected ? "protected " : "") + "set" #>
            {
                __tracker.Dirty();
                _<#= p.Name #> = value;
            }
<# } #>
        }

<# } #>

        public <#= t.Name #>ObjectSegment(global::ZeroFormatter.DirtyTracker dirtyTracker, ArraySegment<byte> originalBytes)
        {
            var __array = originalBytes.Array;

            this.__originalBytes = originalBytes;
            this.__tracker = dirtyTracker = dirtyTracker.CreateChild();
            this.__binaryLastIndex = BinaryUtil.ReadInt32(ref __array, originalBytes.Offset + 4);

            this.__extraFixedBytes = ObjectSegmentHelper.CreateExtraFixedBytes(this.__binaryLastIndex, <#= t.LastIndex #>, __elementSizes);

<# for (var i = 0; i < t.Properties.Length; i++) { #>
<# var p = t.Properties[i]; #>
<# if (p.IsFixedSize) { #>
<# } else if(p.IsCacheSegment) { #>
<# var nextIndex = i + 1 < t.Properties.Length ? t.Properties[i + 1].Index : -1; #>
            _<#= p.Name #> = new CacheSegment<<#= resolverName #>, <#= p.Type #>>(__tracker, ObjectSegmentHelper.GetSegment(originalBytes, <#= p.Index #>, <#= nextIndex #>, __binaryLastIndex, __tracker));
<# } else { #>
            _<#= p.Name #> = ObjectSegmentHelper.DeserializeSegment<<#= resolverName #>, <#= p.Type #>>(originalBytes, <#= p.Index #>, __binaryLastIndex, __tracker);
<# } #>
<# } #>
        }

        public bool CanDirectCopy()
        {
            return !__tracker.IsDirty;
        }

        public ArraySegment<byte> GetBufferReference()
        {
            return __originalBytes;
        }

        public int Serialize(ref byte[] targetBytes, int offset)
        {
            if (__extraFixedBytes != null || __tracker.IsDirty)
            {
                var startOffset = offset;
                offset += (8 + 4 * (<#= t.LastIndex #> + 1));

<# foreach(var p in t.Properties) { #>
<# if (p.IsFixedSize) { #>
                offset += ObjectSegmentHelper.SerializeFixedLength<<#= resolverName #>, <#= p.Type #>>(ref targetBytes, startOffset, offset, <#= p.Index #>, __binaryLastIndex, __originalBytes, __extraFixedBytes, __tracker);
<# } else if(p.IsCacheSegment) { #>
                offset += ObjectSegmentHelper.SerializeCacheSegment<<#= resolverName #>, <#= p.Type #>>(ref targetBytes, startOffset, offset, <#= p.Index #>, ref _<#= p.Name #>);
<# } else { #>
                offset += ObjectSegmentHelper.SerializeSegment<<#= resolverName #>, <#= p.Type #>>(ref targetBytes, startOffset, offset, <#= p.Index #>, _<#= p.Name #>);
<# } } #>

                return ObjectSegmentHelper.WriteSize(ref targetBytes, startOffset, offset, <#= t.LastIndex #>);
            }
            else
            {
                return ObjectSegmentHelper.DirectCopyAll(__originalBytes, ref targetBytes, offset);
            }
        }
    }

<# } #>

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612